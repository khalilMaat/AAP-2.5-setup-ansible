---
# tasks file for postgresql-15
- name: Install PostgreSQL YUM repository RPM
  ansible.builtin.yum:
    name: "{{ postgresql_repo_url }}"
    state: present

- name: Disable the built-in PostgreSQL module
  ansible.builtin.command: dnf -qy module disable postgresql

- name: Install PostgreSQL
  ansible.builtin.yum:
    name:
      - postgresql15-server 
      - postgresql15-contrib
      - python3-pip

- name: Install psycopg2 python package
  ansible.builtin.pip:
    name: psycopg2-binary

- name: Initialize the database
  ansible.builtin.command: /usr/pgsql-15/bin/postgresql-15-setup initdb
  run_once: true

- name: Rename postgresql service
  ansible.builtin.copy:
    src: /usr/lib/systemd/system/postgresql-15.service
    dest: /usr/lib/systemd/system/postgresql.service
    remote_src: yes

- name: Start and enable postgresql service
  ansible.builtin.systemd:
    state: started
    daemon_reload: true
    name: postgresql
    enabled: true

- name: Grant all from network  access for all with client scram-sha-256 authentication
  community.postgresql.postgresql_pg_hba:
    dest: /var/lib/pgsql/15/data/pg_hba.conf
    contype: host
    users: all
    source: "{{ new_domain }}"
    databases: all
    method: md5


- name: Modify port and listen address for postgresql
  ansible.builtin.lineinfile:
    path: /var/lib/pgsql/15/data/postgresql.conf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^listen_addresses', line: "listen_addresses = '*'" }
    - { regexp: '^port', line: "port = 5432" }
  notify: restart postgresql

- name: Restart postgresql service
  ansible.builtin.systemd:
    state: restarted
    daemon_reload: true
    name: postgresql
    enabled: true

#- name: Set password for PostgreSQL 'postgres' user
#  community.postgresql.postgresql_user:
#    name: postgres
#    password: "redhat123"
#    role_attr_flags: "SUPERUSER"
#  become_user: postgres

- name: Create Databases automationgateway and awx
  community.postgresql.postgresql_db:
    #login_host: "{{ db_host }}"
    #login_user: "postgres"
    #login_password: "redhat123"
    name: "{{ item }}"
    port: 5432
  loop: "{{ db_name }}"
  become_user: postgres

- name: Create users and grant privilege and set password
  community.postgresql.postgresql_user:
    name: "{{ item.user }}"
    password: "{{ item.password }}"
    expires: infinity
  loop: "{{ db_users }}"
  become_user: postgres

- name: GRANT PRIVILEGES
  community.postgresql.postgresql_privs:
    login_db: "{{ item.db }}"
    privs: "{{ item.privs }}"
    type: database
    roles: "{{ item.user }}"
    state: present
  loop: "{{ db_users }}"
  become_user: postgres

- name: Test DB connection.
  community.postgresql.postgresql_ping:
    login_db: "{{ item.db }}"
    login_host: "{{ db_host }}"
    login_user: "{{ item.user }}"
    login_password: "{{ item.password }}"
  loop: "{{ db_users }}"
  become_user: postgres
  register: result

- name: Debug test DB connection
  debug:
    var: result 

- name: Collect all info except settings and roles
  community.postgresql.postgresql_info:
    filter: "!settings,!roles"
  become_user: postgres
